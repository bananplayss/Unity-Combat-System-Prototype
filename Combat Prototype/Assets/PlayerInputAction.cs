//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""InputActions"",
            ""id"": ""aead57ab-925f-4992-bc4f-47b62f68273b"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""05f325d5-1dc1-4d68-96e7-aba8f4f5188d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BlockRight"",
                    ""type"": ""Button"",
                    ""id"": ""b6cf6517-3f80-4ef3-9c83-9b8125e191b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BlockLeft"",
                    ""type"": ""Button"",
                    ""id"": ""2add99a1-33fc-4673-adc8-ce64bcf81235"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""bd96d757-854d-4bf1-858b-56751e1c3cab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightAttack"",
                    ""type"": ""Button"",
                    ""id"": ""b9dde769-000b-4ee4-94bd-b4060f2ca1a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HeavyAttack"",
                    ""type"": ""Button"",
                    ""id"": ""f2f1259f-c904-47ee-bd49-b8821061dd7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9b7e71b7-0fdd-48e0-ab54-654afb6fbef2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8479967c-2b18-45c6-b9d9-f749e4dcc04a"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BlockRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbf384e9-c36f-4bbf-8a24-31241cc530b2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e99e3305-224d-4ae1-99ac-9c665fb86804"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66ed2b49-5486-4da1-b46f-c0b3a49e45a9"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeavyAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bf5c5fe-fe4a-4835-abd7-4724dec48e13"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BlockLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InputActions
        m_InputActions = asset.FindActionMap("InputActions", throwIfNotFound: true);
        m_InputActions_Movement = m_InputActions.FindAction("Movement", throwIfNotFound: true);
        m_InputActions_BlockRight = m_InputActions.FindAction("BlockRight", throwIfNotFound: true);
        m_InputActions_BlockLeft = m_InputActions.FindAction("BlockLeft", throwIfNotFound: true);
        m_InputActions_Dash = m_InputActions.FindAction("Dash", throwIfNotFound: true);
        m_InputActions_LightAttack = m_InputActions.FindAction("LightAttack", throwIfNotFound: true);
        m_InputActions_HeavyAttack = m_InputActions.FindAction("HeavyAttack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputActions
    private readonly InputActionMap m_InputActions;
    private List<IInputActionsActions> m_InputActionsActionsCallbackInterfaces = new List<IInputActionsActions>();
    private readonly InputAction m_InputActions_Movement;
    private readonly InputAction m_InputActions_BlockRight;
    private readonly InputAction m_InputActions_BlockLeft;
    private readonly InputAction m_InputActions_Dash;
    private readonly InputAction m_InputActions_LightAttack;
    private readonly InputAction m_InputActions_HeavyAttack;
    public struct InputActionsActions
    {
        private @PlayerInputAction m_Wrapper;
        public InputActionsActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_InputActions_Movement;
        public InputAction @BlockRight => m_Wrapper.m_InputActions_BlockRight;
        public InputAction @BlockLeft => m_Wrapper.m_InputActions_BlockLeft;
        public InputAction @Dash => m_Wrapper.m_InputActions_Dash;
        public InputAction @LightAttack => m_Wrapper.m_InputActions_LightAttack;
        public InputAction @HeavyAttack => m_Wrapper.m_InputActions_HeavyAttack;
        public InputActionMap Get() { return m_Wrapper.m_InputActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputActionsActions set) { return set.Get(); }
        public void AddCallbacks(IInputActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_InputActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputActionsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @BlockRight.started += instance.OnBlockRight;
            @BlockRight.performed += instance.OnBlockRight;
            @BlockRight.canceled += instance.OnBlockRight;
            @BlockLeft.started += instance.OnBlockLeft;
            @BlockLeft.performed += instance.OnBlockLeft;
            @BlockLeft.canceled += instance.OnBlockLeft;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @LightAttack.started += instance.OnLightAttack;
            @LightAttack.performed += instance.OnLightAttack;
            @LightAttack.canceled += instance.OnLightAttack;
            @HeavyAttack.started += instance.OnHeavyAttack;
            @HeavyAttack.performed += instance.OnHeavyAttack;
            @HeavyAttack.canceled += instance.OnHeavyAttack;
        }

        private void UnregisterCallbacks(IInputActionsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @BlockRight.started -= instance.OnBlockRight;
            @BlockRight.performed -= instance.OnBlockRight;
            @BlockRight.canceled -= instance.OnBlockRight;
            @BlockLeft.started -= instance.OnBlockLeft;
            @BlockLeft.performed -= instance.OnBlockLeft;
            @BlockLeft.canceled -= instance.OnBlockLeft;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @LightAttack.started -= instance.OnLightAttack;
            @LightAttack.performed -= instance.OnLightAttack;
            @LightAttack.canceled -= instance.OnLightAttack;
            @HeavyAttack.started -= instance.OnHeavyAttack;
            @HeavyAttack.performed -= instance.OnHeavyAttack;
            @HeavyAttack.canceled -= instance.OnHeavyAttack;
        }

        public void RemoveCallbacks(IInputActionsActions instance)
        {
            if (m_Wrapper.m_InputActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_InputActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputActionsActions @InputActions => new InputActionsActions(this);
    public interface IInputActionsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnBlockRight(InputAction.CallbackContext context);
        void OnBlockLeft(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnLightAttack(InputAction.CallbackContext context);
        void OnHeavyAttack(InputAction.CallbackContext context);
    }
}
